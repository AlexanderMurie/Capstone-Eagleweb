##### WEBSITE SIMULATION: CAPE POINT#####
readGeoFiles <- function()
{
#Require packages
require(rgdal)
print("rgdal loaded") #TRACER
#Scenario: A developer is interested in putting a wind farm on the Cape Penninsula, there is one Verreaux's eagle nest on site:
#This is the development area as a shapefile:
#NB: you should be able to enter any shapfile/coordinates here and that links to the next step to souce the DEMs,
# consider inventing a development in the Karoo... as I have invented this one.
print("reading shape files ...") #TRACER
#join the home directory to the shape File Path variable.
fShapeFilePath = paste(".", shapeFilePath, sep = "")
dev = readOGR(fShapeFilePath)  #e.g. dsn = ".", layer (name) = "penninsula")
#dsn is the data source name, i,e, the folder directory. So "." represents the current folder directory.
assign("dev", dev, envir = .GlobalEnv)
print("shape files read")                #TRACER
#load 30m SRTM DEMS: 1 Arc-second (you will need to souces these online somehow for other developement areas)
#srtm30a <-raster("./SRTM/s34_e018_1arc_v3.tif")
#srtm30b <-raster("./SRTM/s35_e018_1arc_v3.tif")
print("created srtm rasters")            #TRACER
#merge the two together:
print("begin srtm file merge")
dem = do.call(merge, srtmFileList) #METHOD PROBLEM: the 'slope', 'aspect' and 'slope_sd3' values are NA.
#dem = merge(srtm30a, srtm30b) #Digital Elevation Map? stores the merged raster
assign("dem", dem, envir = .GlobalEnv)
print("srtm files merged.")               #TRACER
#Cleanup
#rm(srtm30a, srtm30b)  #remove the objects
#rm(srtmFileList)  #remove the list to clear up memory
}
visualisePlots <- function()
{
print("Plotting DEM & DEV...")                 #TRACER
#visualise this:
png(test.png)
plot(dem) #plots the digital elevation map using the merged raster.
plot(dev, add=TRUE)  #plots the 'dev' aka development boundary on top of the 'dem' plot.
#I replaced 'T' with 'TRUE' since 'T' can be redefined. See https://stackoverflow.com/questions/6789055/r-inconsistency-why-add-t-sometimes-works-and-sometimes-not-in-the-plot-funct
#output plot to a file
dev.off() #writes plot to a pdf file.
print("DEM & DEV plotted.")                 #TRACER
}
#Global variables
#Consider removing some global variables and replacing them with local variables.
username <- "user"
userDataFile <- "user data"
dem <- "digitalElevationMap"
dev <- "boundaryMap"
dev.terrain <- ""
riskmod <- ""
slope <- ""
aspect <- ""
slope_sd3 <- ""
rar <- ""
#file paths
nestFilePath <- "" #/User/Bob/temp/nest_locations.csv
shapeFilePath <- "" #/User/Bob/temp
#create a list of srtm variables to store each srtm file path
srtmFileList <- list()
#packages you need to install to run (you only need to do this step the first time):
installPacks <- function()
{
install.packages("effects")   #CANT INSTALL THIS PACKAGE ON THE SNR LAB PC'S VERSION OF RSTUDIO.
install.packages("lme4")
install.packages("rgdal")
install.packages("raster")
install.packages("geosphere")
}
#Load the above model and look at the effects:
#variables in the model are: nest_dist = the distance from the nest
#                           slope = terrain slop
#                           slope_sd = the standard deviation of the slope in a grid around each GPS fix
#                           alt = terrain altitude (elevation)
#The code block below requires the "effects" package.
plotEffects <- function()
{
print("ploting effects") #TRACER
require(effects)
riskmod <- readRDS("riskmod.rds")
#this allows you to see the effects of each variable, it's not important at the stage as this is not the final model
#but it does include all of the relevant variables that I expect will feature in the final model.
#plot(allEffects(riskmod), type="response")     #HALTING EXECUTION
assign("riskmod", riskmod, envir = .GlobalEnv)
print("effects plotted.") #TRACER
}
##### WEBSITE SIMULATION: CAPE POINT#####
readGeoFiles <- function()
{
#Require packages
require(rgdal)
print("rgdal loaded") #TRACER
#Scenario: A developer is interested in putting a wind farm on the Cape Penninsula, there is one Verreaux's eagle nest on site:
#This is the development area as a shapefile:
#NB: you should be able to enter any shapfile/coordinates here and that links to the next step to souce the DEMs,
# consider inventing a development in the Karoo... as I have invented this one.
print("reading shape files ...") #TRACER
#join the home directory to the shape File Path variable.
fShapeFilePath = paste(".", shapeFilePath, sep = "")
dev = readOGR(fShapeFilePath)  #e.g. dsn = ".", layer (name) = "penninsula")
#dsn is the data source name, i,e, the folder directory. So "." represents the current folder directory.
assign("dev", dev, envir = .GlobalEnv)
print("shape files read")                #TRACER
#load 30m SRTM DEMS: 1 Arc-second (you will need to souces these online somehow for other developement areas)
#srtm30a <-raster("./SRTM/s34_e018_1arc_v3.tif")
#srtm30b <-raster("./SRTM/s35_e018_1arc_v3.tif")
print("created srtm rasters")            #TRACER
#merge the two together:
print("begin srtm file merge")
dem = do.call(merge, srtmFileList) #METHOD PROBLEM: the 'slope', 'aspect' and 'slope_sd3' values are NA.
#dem = merge(srtm30a, srtm30b) #Digital Elevation Map? stores the merged raster
assign("dem", dem, envir = .GlobalEnv)
print("srtm files merged.")               #TRACER
#Cleanup
#rm(srtm30a, srtm30b)  #remove the objects
#rm(srtmFileList)  #remove the list to clear up memory
}
visualisePlots <- function()
{
print("Plotting DEM & DEV...")                 #TRACER
#visualise this:
png(test.png)
plot(dem) #plots the digital elevation map using the merged raster.
plot(dev, add=TRUE)  #plots the 'dev' aka development boundary on top of the 'dem' plot.
#I replaced 'T' with 'TRUE' since 'T' can be redefined. See https://stackoverflow.com/questions/6789055/r-inconsistency-why-add-t-sometimes-works-and-sometimes-not-in-the-plot-funct
#output plot to a file
dev.off() #writes plot to a pdf file.
print("DEM & DEV plotted.")                 #TRACER
}
#Extract the info needed for the model:
extractData <- function()
{
print("extracting data...")   #TRACER
#example - terrain(x, opt, unit, neighbors)   #https://www.rdocumentation.org/packages/raster/versions/2.6-7/topics/terrain
slope <-terrain(dem, opt=c('slope'), unit='degrees', neighbors=8) # 8 neighbor cells (queen case) to compute slope for any cell.
aspect <-terrain(dem, opt=c('aspect'), unit='degrees')
#****** LONG PROCESS INCOMING *******
slope_sd3 <-focal(slope, w=matrix(1,3,3), fun=sd) ##NB this layer take 5min+ to make. It is taking each grid cell and finding the standard deviation of the altitude of it and the cells around it on a 3x3 grid (i.e. SD of 9 cells)
print("data extracted")   #TRACER
#make local variables global
print("assigning local variables...") #TRACER
assign("slope", slope, envir = .GlobalEnv)
assign("aspect", aspect, envir = .GlobalEnv)
assign("slope_sd3", slope_sd3, envir = .GlobalEnv)
print("assignment complete.") #TRACER
}
#HARDCODED ARGS FOR TESTING
assign("username", "Bob", envir = .GlobalEnv)
assign("userDataFile", "userData.csv", envir = .GlobalEnv)
#Global variables
#Consider removing some global variables and replacing them with local variables.
username <- "user"
userDataFile <- "user data"
dem <- "digitalElevationMap"
dev <- "boundaryMap"
dev.terrain <- ""
riskmod <- ""
slope <- ""
aspect <- ""
slope_sd3 <- ""
rar <- ""
#file paths
nestFilePath <- ""  #/User/Bob/temp/nest_locations.csv
shapeFilePath <- "" #/User/Bob/temp
focalFilePath <- "" #./Focal
#create a list of srtm variables to store each srtm file path
srtmFileList <- list()
readUserCSVFile <- function() #Read via CSV
{
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
for (rowItem in userInput$Name) # iterate for each row item in the first column called "Name"
{
myRowCounter <- myRowCounter+1 #increment the row counter by 1 for each iteration of the for-loop.
if (rowItem == "nest")
{
nestFilePath <- userInput$Path[myRowCounter] #row 1 will always store the nest tag
print(nestFilePath, max.levels = 0) #max.levels = 0  means it won't indicate how many levels should be printed for each factor.
}
else if (rowItem == "shape")
{
shapeFilePath <- userInput$Path[myRowCounter] #row 2 will always store the shape tag
print(shapeFilePath, max.levels = 0) #TRACER
}
else if (rowItem == "srtm")
{
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
focalFileList[[myRowCounter-2]] <- raster()
}
}
print("Printing srtm file list")
for (i in srtmFileList)
{
print(i)
}
#assign global variables (x), to equal the local variables value.
assign("nestFilePath", nestFilePath, envir = .GlobalEnv)
assign("shapeFilePath", shapeFilePath, envir = .GlobalEnv)
assign("srtmFileList", srtmFileList, envir = .GlobalEnv)
print("Finished reading user CSV file.") #TRACER
}
main <- function()
{
args <- commandArgs(trailingOnly = TRUE)
if (!is.na(args[1]) && !is.na(args[2])) print("sufficient input")
{
#Read via TERMINAL
#assign("filenameCSV", args[1], envir = .GlobalEnv) #set the filenameCSV variable to equal args[1].
#assign("shpFileLayerName", args[2], envir = .GlobalEnv) #set the shpFileLayerName variable to equal args[2].
#Read via Naeem's Python program.
print("reading user input ...") #TRACER
#assign("username", args[1], envir = .GlobalEnv)
#assign("userDataFile", args[2], envir = .GlobalEnv)
#HARDCODED ARGS FOR TESTING
assign("username", "Bob", envir = .GlobalEnv)
assign("userDataFile", "userData.csv", envir = .GlobalEnv)
}
#Tracer statements
cat(username, sep = "\n")   #TRACER
cat(userDataFile, sep = "\n")   #TRACER
#Begin the method train!
readUserCSVFile()
plotEffects()  #this method is causing trouble.
readGeoFiles()
visualisePlots()
extractData()   #LONG PROCESS!!!
handleTerrainStack()
convertToDataframe()
changeColNames()
handleNestCoordsCSV()
calcDist()
addCat()
runModel()
print("R program finished!")   #TRACER
}
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
View(userInput)
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
for (rowItem in userInput$Name) # iterate for each row item in the first column called "Name"
{
myRowCounter <- myRowCounter+1 #increment the row counter by 1 for each iteration of the for-loop.
if (rowItem == "nest")
{
nestFilePath <- userInput$Path[myRowCounter] #row 1 will always store the nest tag
print(nestFilePath, max.levels = 0) #max.levels = 0  means it won't indicate how many levels should be printed for each factor.
}
else if (rowItem == "shape")
{
shapeFilePath <- userInput$Path[myRowCounter] #row 2 will always store the shape tag
print(shapeFilePath, max.levels = 0) #TRACER
}
else if (rowItem == "srtm")
{
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
testSplit <- strsplit(srtmFilePath,"/")
print(testSplit)
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
focalFileList[[myRowCounter-2]] <- raster()
}
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#get a substring of the srtm file name
testSplit <- strsplit(srtmFilePath,"/")
print(testSplit)
x <-/SRTM/S34E018.tif
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
testSplit <- strsplit(srtmFilePath,"/")
print(testSplit)
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
testSplit <- strsplit(srtmFilePath,"//")
print(testSplit)
#get a substring of the srtm file name
filePath <- "/SRTM/S35E018.tif"
testSplit <- strsplit(srtmFilePath,"/")
print(testSplit)
#get a substring of the srtm file name
filePath <- "/SRTM/S35E018.tif"
testSplit <- strsplit(filePath,"/")
print(testSplit)
#get a substring of the srtm file name
filePath <- "/SRTM/S35E018.tif"
testSplit <- strsplit(filePath,"/")
print(testSplit)
tail(testSplit[[1]],1)
readUserCSVFile <- function() #Read via CSV
{
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
for (rowItem in userInput$Name) # iterate for each row item in the first column called "Name"
{
myRowCounter <- myRowCounter+1 #increment the row counter by 1 for each iteration of the for-loop.
if (rowItem == "nest")
{
nestFilePath <- userInput$Path[myRowCounter] #row 1 will always store the nest tag
print(nestFilePath, max.levels = 0) #max.levels = 0  means it won't indicate how many levels should be printed for each factor.
}
else if (rowItem == "shape")
{
shapeFilePath <- userInput$Path[myRowCounter] #row 2 will always store the shape tag
print(shapeFilePath, max.levels = 0) #TRACER
}
else if (rowItem == "srtm")
{
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
#filePath <- "/SRTM/S35E018.tif"
testSplit <- strsplit(srtmFilePath,"/") #split the filepath based on '/'
print(testSplit)     #TRACER
focalElement <- tail(testSplit[[1]],1) #for a single string, '[[' converts the 'list' to a 'vector' and gets the last element with 'tail']]
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
focalFileList[[myRowCounter-2]] <- raster(focalElement)
}
}
print("Printing srtm file list")
for (i in srtmFileList)
{
print(i)
}
#assign global variables (x), to equal the local variables value.
assign("nestFilePath", nestFilePath, envir = .GlobalEnv)
assign("shapeFilePath", shapeFilePath, envir = .GlobalEnv)
assign("srtmFileList", srtmFileList, envir = .GlobalEnv)
print("Finished reading user CSV file.") #TRACER
}
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
for (rowItem in userInput$Name) # iterate for each row item in the first column called "Name"
{
myRowCounter <- myRowCounter+1 #increment the row counter by 1 for each iteration of the for-loop.
if (rowItem == "nest")
{
nestFilePath <- userInput$Path[myRowCounter] #row 1 will always store the nest tag
print(nestFilePath, max.levels = 0) #max.levels = 0  means it won't indicate how many levels should be printed for each factor.
}
else if (rowItem == "shape")
{
shapeFilePath <- userInput$Path[myRowCounter] #row 2 will always store the shape tag
print(shapeFilePath, max.levels = 0) #TRACER
}
else if (rowItem == "srtm")
{
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
#filePath <- "/SRTM/S35E018.tif"
testSplit <- strsplit(srtmFilePath,"/") #split the filepath based on '/'
print(testSplit)     #TRACER
focalElement <- tail(testSplit[[1]],1) #for a single string, '[[' converts the 'list' to a 'vector' and gets the last element with 'tail']]
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
focalFileList[[myRowCounter-2]] <- raster(focalElement)
}
}
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
#create a list of srtm variables to store each srtm file path
srtmFileList <- list()
focalFileList <- list()
#create a list of srtm variables to store each srtm file path
srtmFileList <- list()
focalFileList <- list()
readUserCSVFile <- function() #Read via CSV
{
print("reading user CSV file ...") #TRACER
require(raster)
print("raster loaded") #TRACER
#store nestFileName
#get nest file path from the userInput.csv file.
userInput <- read.csv(file = "userData.csv", header = TRUE, sep = ",") #The file has a name header and a path header.
#find row length
rowLength <- length(userInput$Name)
#create a row counter to track the row items.
myRowCounter <- 0
for (rowItem in userInput$Name) # iterate for each row item in the first column called "Name"
{
myRowCounter <- myRowCounter+1 #increment the row counter by 1 for each iteration of the for-loop.
if (rowItem == "nest")
{
nestFilePath <- userInput$Path[myRowCounter] #row 1 will always store the nest tag
print(nestFilePath, max.levels = 0) #max.levels = 0  means it won't indicate how many levels should be printed for each factor.
}
else if (rowItem == "shape")
{
shapeFilePath <- userInput$Path[myRowCounter] #row 2 will always store the shape tag
print(shapeFilePath, max.levels = 0) #TRACER
}
else if (rowItem == "srtm")
{
srtmFilePath <- userInput$Path[myRowCounter] #rowLength - 2 will always store the srtm tags
print(srtmFilePath, max.levels = 0)  #TRACER
#join the home directory to the srtm File Path variable.
nsrtmFilePath = paste(".", srtmFilePath, sep = "")
#get a substring of the srtm file name
# filePath <- "/SRTM/S35E018.hgt"
# print("printing srtmFilePath...")
# print(filePath, max.levels = 0)
#split the filepath based on '/'
testSplit <- strsplit(srtmFilePath,sep = "/")
# print(testSplit)     #TRACER
#get srtm file name with extension
srtmFilewExtension <- tail(testSplit[[1]],1) #for a single string, '[[' converts the 'list' to a 'vector' and gets the last element with 'tail']]
# print(srtmFilewExtension)
#only get the srtm file name
getSRTMFileName<- strsplit(srtmFilewExtension, ".", fixed = TRUE)
# print(getSRTMFileName)
#add .tif to the srtm file name --> creating the focal file name.
focalFile <- paste0(head(getSRTMFileName[[1]],1), ".tif")
# print(focalFile)
focalFilePath <- paste("./Focal/", focalFile, sep = "")
# print(focalFilePath)
#add raster of new srtm file path to the srtm file list postion of (row counter - 2).
srtmFileList[[myRowCounter-2]] <- raster(nsrtmFilePath)
focalFileList[[myRowCounter-2]] <- raster(focalFilePath)
}
}
print("Printing srtm file list")
for (i in srtmFileList)
{
print(i)
}
print("Printing focal file list")
for (i in focalFileList)
{
print(i)
}
#assign global variables (x), to equal the local variables value.
assign("nestFilePath", nestFilePath, envir = .GlobalEnv)
assign("shapeFilePath", shapeFilePath, envir = .GlobalEnv)
assign("srtmFileList", srtmFileList, envir = .GlobalEnv)
assign("focalFileList", focalFileList, envir = .GlobalEnv)
print("Finished reading user CSV file.") #TRACER
}
print("risk map plotted")   #TRACER
writeRaster(risk_plot, "capepoint_risk", format = "GTiff", overwrite = TRUE) #Print
source('C:/Users/Stevy T/Desktop/R_code_Final/Mysimulator.R', echo=TRUE)
